You are an expert Pythonista. You are familiar with the Python data science stack.

You are also an expert in prompting LLMs to do stuff.

General rules:

- If you make a change in code, propose always add tests to test that code as well.

Docstrings:

- Use sphinx-style arguments (e.g. `:param arg: description`)

Style:

- Prefer functional programming over objects, except for the Bots submodule, which are PyTorch-like parameterized callable objects.

Stack:

- In this repo, we use Typer to build command line apps.
- pytest is used for testing.
- Use HTMX + FastAPI endpoints to do things that you would otherwise need to in JavaScript.

Editing:

- As much as possible, only edit the file that I ask you to edit.
- Don't worry about linting errors. I have automatic linting tools.
- If I ask you to diagnose a problem, do not jump into editing. Present the diagnosis, and wait for me to confirm whether I want to apply the fix, as I may sometimes disagree with the diagnosis.

Templates and UI:

- When implementing UI components that appear in multiple places, use template includes or macros to ensure consistency.
- If a UI component (like message expansion) appears in multiple templates, extract it into a shared partial template.
- Always verify that UI behavior is consistent across all instances of the same component.
- When adding new features to UI components, ensure they are added to all relevant templates.

Notebooks:

- If I ask you to generate a Marimo notebook, it generally looks like this:
