name: Release Python Package

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: "One of major, minor, or patch"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
  pull_request:
    branches:
      - '**'

env:
  UV_SYSTEM_PYTHON: 1
  DEFAULT_VERSION_NAME: patch

jobs:
  deploy-package:
    runs-on: ubuntu-latest
    name: ${{ github.event_name == 'pull_request' && '(Dry Run) ' || '' }}Publish Python Package to PyPI

    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Setup Pixi Environment
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: latest
          cache: true
          cache-write: ${{ github.event_name == 'push' }}

      - name: Set up Python
        run: |
          uv python install
          uv pip install bumpversion

      - name: Set version name
        run: echo "VERSION_NAME=${{ github.event.inputs.version_name || env.DEFAULT_VERSION_NAME }}" >> $GITHUB_ENV

      - name: Dry run bumpversion
        run: |
          bumpversion --dry-run ${{ env.VERSION_NAME }} --allow-dirty --verbose

      - name: Store new version number
        run: echo "version_number=`bumpversion --dry-run --list ${{ env.VERSION_NAME }} | grep new_version | sed -r s,"^.*=",,`" >> $GITHUB_ENV

      - name: Display new version number
        run: |
          echo "version_name: ${{ env.VERSION_NAME }}"
          echo "version_number: v${{ env.version_number }}"

      - name: Ensure repo status is clean
        run: git status

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Run bumpversion
        run: bumpversion ${{ env.VERSION_NAME }} --verbose

      - name: Ensure tag creation
        run: git tag | grep ${{ env.version_number }}

      - name: Install llamabot package
        run: uv pip install -e .

      - name: Write release notes
        if: github.event_name != 'pull_request'
        env:
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          llamabot configure default-model --model-name="${{ secrets.DEFAULT_LANGUAGE_MODEL }}"
          llamabot git write-release-notes

      - name: Commit release notes
        if: github.event_name != 'pull_request'
        run: |
          uv pip install pre-commit
          pre-commit run --all-files || pre-commit run --all-files
          git add .
          git commit -m "Add release notes for ${{ env.version_number }}"

      - name: Build package
        run: |
          uv pip install build wheel
          python -m build -w -s

      - name: Publish package
        if: github.event_name != 'pull_request'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Push changes with tags
        if: github.event_name != 'pull_request'
        run: |
          git push && git push --tags

      - name: Create release in GitHub repo
        if: github.event_name != 'pull_request'
        uses: ncipollo/release-action@v1
        with:
          bodyFile: "docs/releases/v${{ env.version_number }}.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.version_number }}

      - name: Ensure complete
        if: github.event_name != 'pull_request'
        run: echo "Auto-release complete!"
